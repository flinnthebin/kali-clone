#!/bin/bash

set -e

BIN_DIR="$HOME/.local/bin"
mkdir -p "$BIN_DIR"

install_script() {
  local name=$1
  local url=$2
  local filename=$3
  SRC_DIR="$(mktemp -d /tmp/tmp-src-XXXXXX)"
  echo "[*] Installing $name from $url..."
  curl -sL "$url" -o "$SRC_DIR/$filename"
  chmod +x "$SRC_DIR/$filename"
  cp "$SRC_DIR/$filename" "$BIN_DIR/$name"
  rm -rf "$SRC_DIR"
  echo "[✓] Installed $name"
}

git_uv_sandbox() {
  local tool_name=$1
  local git_repo=$2
  local tool_dir="/usr/pybin/$tool_name"

  mkdir -p "$tool_dir"
  echo "[*] Cloning $tool_name from $git_repo into sandbox..."
  git clone "$git_repo" "$tool_dir/src" >/dev/null

  cd "$tool_dir" || exit 1
  uv venv >/dev/null
  source .venv/bin/activate

  echo "[*] Installing $tool_name dependencies using uv..."
  uv pip install ./src

  deactivate

  # Wrapper script
  cat <<EOF > "$tool_dir/$tool_name"
#!/bin/bash
cd "\$(dirname "\$(readlink -f "\$0")")"
source .venv/bin/activate
exec $tool_name "\$@"
EOF

  chmod +x "$tool_dir/$tool_name"
  sudo ln -sf "$tool_dir/$tool_name" "/usr/local/bin/$tool_name"

  echo "[✓] Installed isolated git uv sandbox for $tool_name"
}

pip_uv_sandbox() {
  local tool_name=$1
  shift
  local packages="$@"
  local tool_dir="/usr/pybin/$tool_name"

  mkdir -p "$tool_dir"
  cd "$tool_dir" || exit 1

  echo "[*] Creating sandbox for $tool_name"
  
  uv venv >/dev/null
  source .venv/bin/activate
  uv pip install $packages
  deactivate

  # Wrapper script
  cat <<EOF > "$tool_dir/$tool_name"
#!/bin/bash
cd "\$(dirname "\$(readlink -f "\$0")")"
source .venv/bin/activate
exec python -m $tool_name "\$@"
EOF

  chmod +x "$tool_dir/$tool_name"
  sudo ln -sf "$tool_dir/$tool_name" "/usr/local/bin/$tool_name"

  echo "[✓] Installed isolated uv sandbox for $tool_name"
}

git_uv_sandbox_multi() {
  # First argument: Repository/tool name (used for directory and wrapper names)
  # Second argument: Git repository URL
  # All further arguments: list of script paths (relative to repo root) to create wrappers for.
  local repo_name=$1
  local git_repo=$2
  shift 2
  local scripts=("$@")
  local tool_dir="/usr/pybin/$repo_name"

  mkdir -p "$tool_dir"
  echo "[*] Cloning $repo_name from $git_repo into sandbox..."
  git clone "$git_repo" "$tool_dir/src" >/dev/null

  cd "$tool_dir" || exit 1

  # Create a uv-managed virtual environment.
  uv venv >/dev/null

  # If there is a requirements.txt in the repo, install its dependencies.
  if [ -f "$tool_dir/src/requirements.txt" ]; then
    source .venv/bin/activate
    uv pip install -r "$tool_dir/src/requirements.txt"
    deactivate
  fi

  # For each specified script, create a wrapper.
  for script in "${scripts[@]}"; do
    local base_script_name
    base_script_name=$(basename "$script" | sed 's/\.[^.]*$//')  # removes extension
    local interpreter=""
    if [[ "$script" =~ \.py$ ]]; then
      interpreter="python"
      # Wrapper with venv activation for Python script.
      cat <<EOF > "$tool_dir/$base_script_name"
#!/bin/bash
cd "\$(dirname "\$(readlink -f "\$0")")/src"
source ../.venv/bin/activate
exec $interpreter "$(basename "$script")" "\$@"
EOF
    elif [[ "$script" =~ \.php$ ]]; then
      interpreter="php"
      # Wrapper without venv activation for PHP script.
      cat <<EOF > "$tool_dir/$base_script_name"
#!/bin/bash
cd "\$(dirname "\$(readlink -f "\$0")")/src"
exec $interpreter "$(basename "$script")" "\$@"
EOF
    else
      # Default to Python if no recognized extension.
      interpreter="python"
      cat <<EOF > "$tool_dir/$base_script_name"
#!/bin/bash
cd "\$(dirname "\$(readlink -f "\$0")")/src"
source ../.venv/bin/activate
exec $interpreter "$(basename "$script")" "\$@"
EOF
    fi
    chmod +x "$tool_dir/$base_script_name"
    sudo ln -sf "$tool_dir/$base_script_name" "/usr/local/bin/$base_script_name"
  done

  echo "[✓] Installed isolated git uv sandbox for $repo_name with wrappers for: ${scripts[*]}"
}

sudo pacman -Syyu

# 0trace
install_0trace() {
  local bin_dir="$1"
  local src_dir
  src_dir="$(mktemp -d /tmp/0trace-src-XXXXXX)"
  echo "[*] Installing 0trace into $bin_dir"
  curl -sL "https://gitlab.com/kalilinux/packages/0trace/-/raw/kali/master/0trace.sh" -o "$src_dir/0trace.sh"
  curl -sL "https://gitlab.com/kalilinux/packages/0trace/-/raw/kali/master/sendprobe.c" -o "$src_dir/sendprobe.c"
  curl -sL "https://gitlab.com/kalilinux/packages/0trace/-/raw/kali/master/types.h" -o "$src_dir/types.h"
  if [[ ! -f "$src_dir/0trace.sh" || ! -f "$src_dir/sendprobe.c" || ! -f "$src_dir/types.h" ]]; then
    echo "[-] Error downloading 0trace files." >&2
    rm -rf "$src_dir"
    return 1
  fi
  if ! gcc -o "$src_dir/sendprobe" "$src_dir/sendprobe.c"; then
    echo "[-] Compilation of sendprobe failed." >&2
    rm -rf "$src_dir"
    return 1
  fi
  chmod +x "$src_dir/0trace.sh"
  cp "$src_dir/0trace.sh" "$bin_dir/0trace"
  cp "$src_dir/sendprobe" "$bin_dir/sendprobe"
  rm -rf "$src_dir"
  echo "[✓] Successfully installed 0trace."
}
install_0trace "$BIN_DIR"

# aadict
pip_uv_sandbox aadict aadict

# aardwolf
pip_uv_sandbox aardwolf aardwolf

# above
git_uv_sandbox "above" "https://github.com/casterbyte/above"

# acccheck
install_script "acccheck" "https://raw.githubusercontent.com/qashqao/acccheck/refs/heads/master/acccheck.pl" "acccheck.pl"

# acstore
pip_uv_sandbox acstore acstore

# aesedb
pip_uv_sandbox aesedb aesedb

# aiocmd
pip_uv_sandbox aiocmd aiocmd

# aioconsole
pip_uv_sandbox aioconsole aioconsole

# aiohttp-apispec
pip_uv_sandbox aiohttp-apispec aiohttp-apispec

# aiomultiprocess
pip_uv_sandbox aiomultiprocess aiomultiprocess

# aiosmb
pip_uv_sandbox aiosmb aiosmb

# aiowinreg
pip_uv_sandbox aiowinreg aiowinreg

# airgeddon
sudo pacman -S base-devel libnl openssl ethtool util-linux zlib libpcap sqlite pcre2 hwloc cmocka hostapd wpa_supplicant tcpdump screen iw usbutils pciutils expect aircrack-ng wireshark-cli
install_script "airgeddon" "https://raw.githubusercontent.com/v1s1t0r1sh3r3/airgeddon/refs/heads/master/airgeddon.sh" "airgeddon.sh"

# altdns
pip_uv_sandbox py-altdns py-altdns

# amap - deprecated, use nmap

# amass
go install -v github.com/owasp-amass/amass/v4/...@master

# apache-users
install_script "apache-users" "https://gitlab.com/kalilinux/packages/apache-users/-/raw/kali/master/apache2.1.pl" "apache2.1.pl"

# apispec
pip_uv_sandbox apispec apispec

# apispec-webframeworks
pip_uv_sandbox apispec-webframeworks apispec-webframeworks

# apktool
install_script "apktool" "https://raw.githubusercontent.com/h4ck3r0/Apktool-kalilinux/refs/heads/master/apktool.sh" "apktool.sh"

# apple-bleee # failing CI/CD pipeline
#sudo pacman -S bluez libpcap libev libnl cmake bluez-libs
#git_uv_sandbox_multi "apple_bleee" "https://github.com/hexway/apple_bleee.git" \
#  "ble_read_state.py" "airdrop_leak.py" "adv_wifi.py" "adv_airpods.py" \
#  "hash2phone/hashmap_gen.py" "hash2phone/hashmap_gen_sqlite.py" "hash2phone/map_hash_num.php" "hash2phone/map_hash_num_sqlite.php"

# arc4
pip_uv_sandbox arc4 arc4

# arkime
# TODO: THIS IS NOT DONE

# armitage
# TODO: THIS IS NOT DONE

# asleap
# TODO: THIS IS NOT DONE

# asn1tools
pip_uv_sandbox asn1tools asn1tools

# asyauth
pip_uv_sandbox asyauth asyauth

# asysocks
pip_uv_sandbox asysocks asysocks

# autopsy
# TODO: THIS IS NOT DONE

# autorecon
git_uv_sandbox "autorecon" "https://github.com/Tib3rius/AutoRecon.git"


# feroxbuster
curl -sL https://raw.githubusercontent.com/epi052/feroxbuster/main/install-nix.sh | bash -s $HOME/.local/bin

# sipvicious-ng (replaces ace-voip)
pip_uv_sandbox sipvicious sipvicious


